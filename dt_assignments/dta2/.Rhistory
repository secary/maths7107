## Q11.(a) Get the estimate of $\lambda$
```{r}
# Use BoxCoxTrans to obtain lambda, with the steps of 0.1 in range [-10,10]
arch_sample_bc <- BoxCoxTrans(
y = arch_sample$acc,
x = arch_sample$xp,
lambda = seq(-10,10,0.1)
)
arch_sample_bc$lambda
# Predict transformation and add it into a new column
arch_sample<- mutate(arch_sample,acc_bc = predict(arch_sample_bc,arch_sample$acc))
arch_sample
library(tidyverse)
library(inspectdf)
library(caret)
library(moments)
library(tidyverse)
library(inspectdf)
library(caret)
library(moments)
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_ALL", "English")
# Load the required packages
library(tidyverse)
library(inspectdf)
library(caret)
library(moments)
# Your student number and calculate file number
ysn = 1942340
filenum <- (ysn+1) %% 3
filenum
# Read in the data
arch0 <- read.csv('./data/archery_0.csv')
head(arch0,10)
# Add row numbers and store the new tibble for comparison
arch1 <- mutate(arch0,Archer = (1:555))
arch1 <- rename(arch1,id = Archer)
# calculate the xp days
arch1 <- mutate(arch1,xp = dmy('15-06-2024') - dmy(Commenced))
arch1 <- relocate(arch1,"xp",.before = Commenced)
# extract targets numbers and arrows numbers
arch1 <- mutate(arch1,targets = str_match(arch1$RES, 'hit (\\d+) times from (\\d+) shots')[,2])
arch1 <- mutate(arch1,arrows = str_match(arch1$RES, 'hit (\\d+) times from (\\d+) shots')[,3])
arch1 <- mutate(arch1,RES = NULL)
arch1 <- relocate(arch1,"arrows",.before = targets)
head(arch1,10)
# Change column titles in lower case
arch1 <- rename(arch1,commenced = Commenced)
# Change xp days to integers
arch1$xp <- as.integer(arch1$xp)
# Change commenced dates into year-month-day format
arch1$commenced <- dmy(arch1$commenced)
# Change id and commenced dates to factor type
arch1$id <- as.factor(arch1$id)
arch1$commenced <- as.factor(arch1$commenced)
# Change arrows and targets into integers
arch1$arrows <- as.integer(arch1$arrows)
arch1$targets <- as.integer(arch1$targets)
# Check is there any impossible data in the tibble
inspect_na(arch1)
# Check the whole tibble for strange numbers
inspect_num(arch1)
# Delete the commenced date with too large numbers
arch1 <- filter(arch1,xp < 45456)
# Check the whole tibble for strange numbers again
inspect_num(arch1)
# Output the tibble
head(arch1,10)
set.seed(1942340)
arch_sample <- sample_n(arch1,450,replace = FALSE)
head(arch_sample,10)
arch_sample <- mutate(arch_sample,acc = targets/arrows)
head(arch_sample,10)
inspect_num(arch_sample)
# preprocess the sample data
arch_preprocess <- preProcess(
tibble(
xp = arch_sample$xp,
acc = arch_sample$acc
))
# predict with the preprocess data
arch_predict <- predict(arch_preprocess,arch_sample)
head(arch_predict,10)
# Show the statistics of standardised variables
standard_data <- tibble(
xp = arch_predict$xp,
acc = arch_predict$acc
)
summary(standard_data)
inspect_num(standard_data)
# plot the histograms of each variable
# xp
ggplot(arch_predict,aes(xp)) +
geom_histogram()
skewness(arch_predict$xp)
#accuracy
ggplot(arch_predict,aes(acc)) +
geom_histogram()
skewness(arch_predict$acc)
# Plot
ggplot(arch_sample,aes(x = xp,y = acc))+
geom_point()+
geom_smooth()
# Use BoxCoxTrans to obtain lambda, with the steps of 0.1 in range [-10,10]
arch_sample_bc <- BoxCoxTrans(
y = arch_sample$acc,
x = arch_sample$xp,
lambda = seq(-10,10,0.1)
)
arch_sample_bc$lambda
# Predict transformation and add it into a new column
arch_sample<- mutate(arch_sample,acc_bc = predict(arch_sample_bc,arch_sample$acc))
head(arch_sample,10)
# plot the scatter plot of transformed data against xp
ggplot(arch_sample,aes(x = xp,y = acc_bc))+
geom_point()+
geom_smooth()
# plot the histogram and get skewness
ggplot(arch_sample,aes(acc_bc))+
geom_histogram()
skewness(arch_sample$acc_bc)
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_ALL", "English")
# Load the required packages
library(tidyverse)
library(inspectdf)
library(caret)
library(moments)
# Your student number and calculate file number
ysn = 1942340
filenum <- (ysn+1) %% 3
filenum
# Read in the data
arch0 <- read.csv('./data/archery_0.csv')
head(arch0,10)
# Add row numbers and store the new tibble for comparison
arch1 <- mutate(arch0,Archer = (1:555))
arch1 <- rename(arch1,id = Archer)
# calculate the xp days
arch1 <- mutate(arch1,xp = dmy('15-06-2024') - dmy(Commenced))
arch1 <- relocate(arch1,"xp",.before = Commenced)
# extract targets numbers and arrows numbers
arch1 <- mutate(arch1,targets = str_match(arch1$RES, 'hit (\\d+) times from (\\d+) shots')[,2])
arch1 <- mutate(arch1,arrows = str_match(arch1$RES, 'hit (\\d+) times from (\\d+) shots')[,3])
arch1 <- mutate(arch1,RES = NULL)
arch1 <- relocate(arch1,"arrows",.before = targets)
head(arch1,10)
# Change column titles in lower case
arch1 <- rename(arch1,commenced = Commenced)
# Change xp days to integers
arch1$xp <- as.integer(arch1$xp)
# Change commenced dates into year-month-day format
arch1$commenced <- dmy(arch1$commenced)
# Change id and commenced dates to factor type
arch1$id <- as.factor(arch1$id)
arch1$commenced <- as.factor(arch1$commenced)
# Change arrows and targets into integers
arch1$arrows <- as.integer(arch1$arrows)
arch1$targets <- as.integer(arch1$targets)
# Check is there any impossible data in the tibble
inspect_na(arch1)
# Check the whole tibble for strange numbers
inspect_num(arch1)
# Delete the commenced date with too large numbers
arch1 <- filter(arch1,xp < 45456)
# Check the whole tibble for strange numbers again
inspect_num(arch1)
# Output the tibble
head(arch1,10)
set.seed(1942340)
arch_sample <- sample_n(arch1,450,replace = FALSE)
head(arch_sample,10)
arch_sample <- mutate(arch_sample,acc = targets/arrows)
head(arch_sample,10)
inspect_num(arch_sample)
# preprocess the sample data
arch_preprocess <- preProcess(
tibble(
xp = arch_sample$xp,
acc = arch_sample$acc
))
# predict with the preprocess data
arch_predict <- predict(arch_preprocess,arch_sample)
head(arch_predict,10)
# Show the statistics of standardised variables
standard_data <- tibble(
xp = arch_predict$xp,
acc = arch_predict$acc
)
summary(standard_data)
inspect_num(standard_data)
# plot the histograms of each variable
# xp
ggplot(arch_predict,aes(xp)) +
geom_histogram()
skewness(arch_predict$xp)
#accuracy
ggplot(arch_predict,aes(acc)) +
geom_histogram()
skewness(arch_predict$acc)
# Plot
ggplot(arch_sample,aes(x = xp,y = acc))+
geom_point()+
geom_smooth()
# Use BoxCoxTrans to obtain lambda, with the steps of 0.1 in range [-10,10]
arch_sample_bc <- BoxCoxTrans(
y = arch_sample$acc,
x = arch_sample$xp,
lambda = seq(-10,10,0.1)
)
arch_sample_bc$lambda
# Predict transformation and add it into a new column
arch_sample<- mutate(arch_sample,acc_bc = predict(arch_sample_bc,arch_sample$acc))
head(arch_sample,10)
# plot the scatter plot of transformed data against xp
ggplot(arch_sample,aes(x = xp,y = acc_bc))+
geom_point()+
geom_smooth()
# plot the histogram and get skewness
ggplot(arch_sample,aes(acc_bc))+
geom_histogram()
skewness(arch_sample$acc_bc)
# Build and assign your linear model
arch_lm <- lm(acc_bc ~ xp,arch_sample)
# Show the statistics
summary(arch_lm)
# Obtain the coefficients
as.numeric(arch_lm$coefficients)
# Show the statistics
summary(arch_lm)
plot(arch_lm, which = 1)
plot(arch_lm, which = 3)
plot(arch_lm, which = 2)
pred_values <- mutate(pred_values,upper = predict(arch_lm,pred_values,interval = 'confidence',level = 0.99)[,3])
pred_data <- tibble(
predict(arch_lm,pred_values,interval = 'confidence',level = 0.99)[,1]))
pred_data <- tibble(
predict(arch_lm,pred_values,interval = 'confidence',level = 0.99)))
pred_data <- tibble(
predict(arch_lm,pred_values,interval = 'confidence',level = 0.99))
# Predict with the linear model
pred_values <- tibble(
xp = c(2*365,5*365,10*365,15*365,20*365,25*365)
)
pred_data <- tibble(
predict(arch_lm,pred_values,interval = 'confidence',level = 0.99))
pred_values <- mutate(pred_values, fit = pred_data[,1])
pred_values <- mutate(pred_values,lower = pred_data[,2])
View(pred_data)
pred_data <- predict(arch_lm,pred_values,interval = 'confidence',level = 0.99)
View(pred_data)
# Predict with the linear model
pred_values <- tibble(
xp = c(2*365,5*365,10*365,15*365,20*365,25*365)
)
pred_data <- predict(arch_lm,pred_values,interval = 'confidence',level = 0.99)
pred_values <- mutate(pred_values, fit = pred_data[,1])
pred_values <- mutate(pred_values,lower = pred_data[,2])
pred_values <- mutate(pred_values,upper = pred_data[,3])
pred_values
# Predict with the linear model
pred_values <- tibble(
xp = c(2*365,5*365,10*365,15*365,20*365,25*365)
)
pred_data <- predict(arch_lm,pred_values,interval = 'confidence',level = 0.99)
pred_values <- mutate(pred_values, fit = pred_data[,1])
pred_values <- mutate(pred_values,lower = pred_data[,2])
pred_values <- mutate(pred_values,upper = pred_data[,3])
# inverse the box-cox transformed data
pred_values <- mutate(
pred_values,
fit = (fit + 1) * arch_sample_bc$lambda * ( 1 / arch_sample_bc$lambda)
)
pred_values <- mutate(
pred_values,
lower = (lower + 1) * arch_sample_bc$lambda * ( 1 / arch_sample_bc$lambda)
)
pred_values <-
mutate(pred_values,
upper = (upper + 1) * arch_sample_bc$lambda * ( 1 / arch_sample_bc$lambda)
)
pred_values
View(pred_data)
# Predict with the linear model
pred_values <- tibble(
xp = c(2*365,5*365,10*365,15*365,20*365,25*365)
)
pred_data <- predict(arch_lm,pred_values,interval = 'confidence',level = 0.99)
pred_values <- mutate(pred_values, fit = pred_data[,1])
pred_values <- mutate(pred_values,lower = pred_data[,2])
pred_values <- mutate(pred_values,upper = pred_data[,3])
# Inverse the box-cox transformed data
pred_values <- mutate(
pred_values,
fit = (fit + 1) * arch_sample_bc$lambda * ( 1 / arch_sample_bc$lambda)
)
pred_values <- mutate(
pred_values,
lower = (lower + 1) * arch_sample_bc$lambda * ( 1 / arch_sample_bc$lambda)
)
pred_values <-
mutate(pred_values,
upper = (upper + 1) * arch_sample_bc$lambda * ( 1 / arch_sample_bc$lambda)
)
pred_values
source("C:/Users/secar/OneDrive/UOA/mds2024t2/7107datatming/dt_assignments/dta2/dta2.R", echo=TRUE)
View(pred_values)
# Predict with the linear model
pred_values <- tibble(
xp = c(2*365,5*365,10*365,15*365,20*365,25*365)
)
pred_data <- predict(arch_lm,pred_values,interval = 'confidence',level = 0.99)
pred_values <- mutate(pred_values, fit = pred_data[,1])
pred_values <- mutate(pred_values,lower = pred_data[,2])
pred_values <- mutate(pred_values,upper = pred_data[,3])
# Inverse the box-cox transformed data
pred_values <- mutate(
pred_values,
fit = ((fit + 1) * arch_sample_bc$lambda) ^ ( 1 / arch_sample_bc$lambda)
)
pred_values <- mutate(
pred_values,
lower = ((lower + 1) * arch_sample_bc$lambda) ^ ( 1 / arch_sample_bc$lambda)
)
pred_values <-
mutate(pred_values,
upper = ((upper + 1) * arch_sample_bc$lambda) ^ ( 1 / arch_sample_bc$lambda)
)
pred_values
# Predict with the linear model
pred_values <- tibble(
xp = c(2*365,5*365,10*365,15*365,20*365,25*365)
)
pred_data <- predict(arch_lm,pred_values,interval = 'confidence',level = 0.99)
pred_values <- mutate(pred_values, fit = pred_data[,1])
pred_values <- mutate(pred_values,lower = pred_data[,2])
pred_values <- mutate(pred_values,upper = pred_data[,3])
# Inverse the box-cox transformed data
pred_values <- mutate(
pred_values,
fit = (fit * arch_sample_bc$lambda + 1) ^ ( 1 / arch_sample_bc$lambda)
)
pred_values <- mutate(
pred_values,
lower = (lower * arch_sample_bc$lambda + 1) ^ ( 1 / arch_sample_bc$lambda)
)
pred_values <-
mutate(pred_values,
upper = (upper * arch_sample_bc$lambda + 1) ^ ( 1 / arch_sample_bc$lambda)
)
pred_values
# Predict with the linear model
pred_values <- tibble(
xp_years = c(2,5,10,15,20,25),
xp = xp_years * 365
)
# Predict with the linear model
pred_values <- tibble(
xp_years = c(2,5,10,15,20,25),
xp = xp_years * 365
)
pred_data <- predict(arch_lm,pred_values,interval = 'confidence',level = 0.99)
pred_values <- mutate(pred_values, fit = pred_data[,1])
pred_values <- mutate(pred_values,lower = pred_data[,2])
pred_values <- mutate(pred_values,upper = pred_data[,3])
# Inverse the box-cox transformed data
pred_values <- mutate(
pred_values,
fit = (fit * arch_sample_bc$lambda + 1) ^ ( 1 / arch_sample_bc$lambda)
)
pred_values <- mutate(
pred_values,
lower = (lower * arch_sample_bc$lambda + 1) ^ ( 1 / arch_sample_bc$lambda)
)
pred_values <-
mutate(pred_values,
upper = (upper * arch_sample_bc$lambda + 1) ^ ( 1 / arch_sample_bc$lambda)
)
pred_values
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_ALL", "English")
# Load the required packages
library(tidyverse)
library(inspectdf)
library(caret)
library(moments)
# Your student number and calculate file number
ysn = 1942340
filenum <- (ysn+1) %% 3
filenum
# Read in the data
arch0 <- read.csv('./data/archery_0.csv')
head(arch0,10)
# Add row numbers and store the new tibble for comparison
arch1 <- mutate(arch0,Archer = (1:555))
arch1 <- rename(arch1,id = Archer)
# calculate the xp days
arch1 <- mutate(arch1,xp = dmy('15-06-2024') - dmy(Commenced))
arch1 <- relocate(arch1,"xp",.before = Commenced)
# extract targets numbers and arrows numbers
arch1 <- mutate(arch1,targets = str_match(arch1$RES, 'hit (\\d+) times from (\\d+) shots')[,2])
arch1 <- mutate(arch1,arrows = str_match(arch1$RES, 'hit (\\d+) times from (\\d+) shots')[,3])
arch1 <- mutate(arch1,RES = NULL)
arch1 <- relocate(arch1,"arrows",.before = targets)
head(arch1,10)
# Change column titles in lower case
arch1 <- rename(arch1,commenced = Commenced)
# Change xp days to integers
arch1$xp <- as.integer(arch1$xp)
# Change commenced dates into year-month-day format
arch1$commenced <- dmy(arch1$commenced)
# Change id and commenced dates to factor type
arch1$id <- as.factor(arch1$id)
arch1$commenced <- as.factor(arch1$commenced)
# Change arrows and targets into integers
arch1$arrows <- as.integer(arch1$arrows)
arch1$targets <- as.integer(arch1$targets)
# Check is there any impossible data in the tibble
inspect_na(arch1)
# Check the whole tibble for strange numbers
inspect_num(arch1)
# Delete the commenced date with too large numbers
arch1 <- filter(arch1,xp < 45456)
# Check the whole tibble for strange numbers again
inspect_num(arch1)
# Output the tibble
head(arch1,10)
set.seed(1942340)
arch_sample <- sample_n(arch1,450,replace = FALSE)
head(arch_sample,10)
arch_sample <- mutate(arch_sample,acc = targets/arrows)
head(arch_sample,10)
inspect_num(arch_sample)
# preprocess the sample data
arch_preprocess <- preProcess(
tibble(
xp = arch_sample$xp,
acc = arch_sample$acc
))
# predict with the preprocess data
arch_predict <- predict(arch_preprocess,arch_sample)
head(arch_predict,10)
# Show the statistics of standardised variables
standard_data <- tibble(
xp = arch_predict$xp,
acc = arch_predict$acc
)
summary(standard_data)
inspect_num(standard_data)
# plot the histograms of each variable
# xp
ggplot(arch_predict,aes(xp)) +
geom_histogram()
skewness(arch_predict$xp)
#accuracy
ggplot(arch_predict,aes(acc)) +
geom_histogram()
skewness(arch_predict$acc)
# Plot
ggplot(arch_sample,aes(x = xp,y = acc))+
geom_point()+
geom_smooth()
# Use BoxCoxTrans to obtain lambda, with the steps of 0.1 in range [-10,10]
arch_sample_bc <- BoxCoxTrans(
y = arch_sample$acc,
x = arch_sample$xp,
lambda = seq(-10,10,0.1)
)
arch_sample_bc$lambda
# Predict transformation and add it into a new column
arch_sample<- mutate(arch_sample,acc_bc = predict(arch_sample_bc,arch_sample$acc))
head(arch_sample,10)
# plot the scatter plot of transformed data against xp
ggplot(arch_sample,aes(x = xp,y = acc_bc))+
geom_point()+
geom_smooth()
# plot the histogram and get skewness
ggplot(arch_sample,aes(acc_bc))+
geom_histogram()
skewness(arch_sample$acc_bc)
# Build and assign your linear model
arch_lm <- lm(acc_bc ~ xp,arch_sample)
# Show the statistics
summary(arch_lm)
# Obtain the coefficients
as.numeric(arch_lm$coefficients)
plot(arch_lm, which = 1)
plot(arch_lm, which = 3)
plot(arch_lm, which = 2)
# Predict with the linear model
pred_values <- tibble(
xp_years = c(2,5,10,15,20,25),
xp = xp_years * 365
)
pred_data <- predict(arch_lm,pred_values,interval = 'confidence',level = 0.99)
pred_values <- mutate(pred_values, fit = pred_data[,1])
pred_values <- mutate(pred_values,lower = pred_data[,2])
pred_values <- mutate(pred_values,upper = pred_data[,3])
# Inverse the box-cox transformed data
pred_values <- mutate(
pred_values,
fit = (fit * arch_sample_bc$lambda + 1) ^ ( 1 / arch_sample_bc$lambda)
)
pred_values <- mutate(
pred_values,
lower = (lower * arch_sample_bc$lambda + 1) ^ ( 1 / arch_sample_bc$lambda)
)
pred_values <-
mutate(pred_values,
upper = (upper * arch_sample_bc$lambda + 1) ^ ( 1 / arch_sample_bc$lambda)
)
pred_values
